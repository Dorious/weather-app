/* tslint:disable */
/* eslint-disable */
/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LatLng
 */
export interface LatLng {
    /**
     * 
     * @type {number}
     * @memberof LatLng
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof LatLng
     */
    lng?: number;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    documentation?: string;
    /**
     * 
     * @type {ResponseRate}
     * @memberof Response
     */
    rate?: ResponseRate;
    /**
     * 
     * @type {Array<ResponseLicenses>}
     * @memberof Response
     */
    licenses?: Array<ResponseLicenses>;
    /**
     * 
     * @type {Array<ResponseResults>}
     * @memberof Response
     */
    results?: Array<ResponseResults>;
    /**
     * 
     * @type {ResponseStatus}
     * @memberof Response
     */
    status?: ResponseStatus;
    /**
     * 
     * @type {ResponseStayInformed}
     * @memberof Response
     */
    stay_informed?: ResponseStayInformed;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    thanks?: string;
    /**
     * 
     * @type {ResponseTimestamp}
     * @memberof Response
     */
    timestamp?: ResponseTimestamp;
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    total_results?: number;
}
/**
 * 
 * @export
 * @interface ResponseBounds
 */
export interface ResponseBounds {
    /**
     * 
     * @type {LatLng}
     * @memberof ResponseBounds
     */
    northeast?: LatLng;
    /**
     * 
     * @type {LatLng}
     * @memberof ResponseBounds
     */
    southwest?: LatLng;
}
/**
 * 
 * @export
 * @interface ResponseLicenses
 */
export interface ResponseLicenses {
    /**
     * 
     * @type {string}
     * @memberof ResponseLicenses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseLicenses
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface ResponseRate
 */
export interface ResponseRate {
    /**
     * 
     * @type {number}
     * @memberof ResponseRate
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRate
     */
    remaining?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRate
     */
    reset?: number;
}
/**
 * 
 * @export
 * @interface ResponseResults
 */
export interface ResponseResults {
    /**
     * 
     * @type {object}
     * @memberof ResponseResults
     */
    annotations?: object;
    /**
     * 
     * @type {ResponseBounds}
     * @memberof ResponseResults
     */
    bounds?: ResponseBounds;
    /**
     * 
     * @type {object}
     * @memberof ResponseResults
     */
    components?: object;
    /**
     * 
     * @type {number}
     * @memberof ResponseResults
     */
    confidence?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseResults
     */
    formatted?: string;
    /**
     * 
     * @type {LatLng}
     * @memberof ResponseResults
     */
    geometry?: LatLng;
}
/**
 * 
 * @export
 * @interface ResponseStatus
 */
export interface ResponseStatus {
    /**
     * 
     * @type {string}
     * @memberof ResponseStatus
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseStatus
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface ResponseStayInformed
 */
export interface ResponseStayInformed {
    /**
     * 
     * @type {string}
     * @memberof ResponseStayInformed
     */
    blog?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStayInformed
     */
    twitter?: string;
}
/**
 * 
 * @export
 * @interface ResponseTimestamp
 */
export interface ResponseTimestamp {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimestamp
     */
    created_http?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimestamp
     */
    created_unix?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * geocode a query
         * @param {number} version API version.
         * @param {string} format format of the response. One of \&#39;json\&#39;, \&#39;xml\&#39; or \&#39;map\&#39;.
         * @param {string} q string or lat,lng to be geocoded.
         * @param {string} key an application key.
         * @param {boolean} [abbrv] when true we attempt to abbreviate the formatted field in the response.
         * @param {boolean} [addRequest] if true the request is included in the response.
         * @param {string} [bounds] four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).
         * @param {string} [countrycode] two letter code ISO 3166-1 Alpha 2 code to limit results to that country.
         * @param {string} [jsonp] wraps the returned JSON with a function name.
         * @param {string} [language] an IETF format language code (ex: \&#39;es\&#39; or \&#39;pt-BR\&#39;).
         * @param {number} [limit] maximum number of results to return. Default is 10. Maximum is 100.
         * @param {number} [minConfidence] integer from 1-10. Only results with at least this confidence are returned.
         * @param {boolean} [noAnnotations] when true annotations are not added to results.
         * @param {boolean} [noDedupe] when true results are not deduplicated.
         * @param {boolean} [noRecord] when true query content is not logged.
         * @param {boolean} [pretty] when true results are pretty printed. Useful for debugging.
         * @param {string} [proximity] lat,lng to bias results.
         * @param {boolean} [roadinfo] match nearest road, include roadinfo annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vversionFormatGet: async (version: number, format: string, q: string, key: string, abbrv?: boolean, addRequest?: boolean, bounds?: string, countrycode?: string, jsonp?: string, language?: string, limit?: number, minConfidence?: number, noAnnotations?: boolean, noDedupe?: boolean, noRecord?: boolean, pretty?: boolean, proximity?: string, roadinfo?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('vversionFormatGet', 'version', version)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('vversionFormatGet', 'format', format)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('vversionFormatGet', 'q', q)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('vversionFormatGet', 'key', key)
            const localVarPath = `/v{version}/{format}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (abbrv !== undefined) {
                localVarQueryParameter['abbrv'] = abbrv;
            }

            if (addRequest !== undefined) {
                localVarQueryParameter['add_request'] = addRequest;
            }

            if (bounds !== undefined) {
                localVarQueryParameter['bounds'] = bounds;
            }

            if (countrycode !== undefined) {
                localVarQueryParameter['countrycode'] = countrycode;
            }

            if (jsonp !== undefined) {
                localVarQueryParameter['jsonp'] = jsonp;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (minConfidence !== undefined) {
                localVarQueryParameter['min_confidence'] = minConfidence;
            }

            if (noAnnotations !== undefined) {
                localVarQueryParameter['no_annotations'] = noAnnotations;
            }

            if (noDedupe !== undefined) {
                localVarQueryParameter['no_dedupe'] = noDedupe;
            }

            if (noRecord !== undefined) {
                localVarQueryParameter['no_record'] = noRecord;
            }

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (proximity !== undefined) {
                localVarQueryParameter['proximity'] = proximity;
            }

            if (roadinfo !== undefined) {
                localVarQueryParameter['roadinfo'] = roadinfo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * geocode a query
         * @param {number} version API version.
         * @param {string} format format of the response. One of \&#39;json\&#39;, \&#39;xml\&#39; or \&#39;map\&#39;.
         * @param {string} q string or lat,lng to be geocoded.
         * @param {string} key an application key.
         * @param {boolean} [abbrv] when true we attempt to abbreviate the formatted field in the response.
         * @param {boolean} [addRequest] if true the request is included in the response.
         * @param {string} [bounds] four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).
         * @param {string} [countrycode] two letter code ISO 3166-1 Alpha 2 code to limit results to that country.
         * @param {string} [jsonp] wraps the returned JSON with a function name.
         * @param {string} [language] an IETF format language code (ex: \&#39;es\&#39; or \&#39;pt-BR\&#39;).
         * @param {number} [limit] maximum number of results to return. Default is 10. Maximum is 100.
         * @param {number} [minConfidence] integer from 1-10. Only results with at least this confidence are returned.
         * @param {boolean} [noAnnotations] when true annotations are not added to results.
         * @param {boolean} [noDedupe] when true results are not deduplicated.
         * @param {boolean} [noRecord] when true query content is not logged.
         * @param {boolean} [pretty] when true results are pretty printed. Useful for debugging.
         * @param {string} [proximity] lat,lng to bias results.
         * @param {boolean} [roadinfo] match nearest road, include roadinfo annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vversionFormatGet(version: number, format: string, q: string, key: string, abbrv?: boolean, addRequest?: boolean, bounds?: string, countrycode?: string, jsonp?: string, language?: string, limit?: number, minConfidence?: number, noAnnotations?: boolean, noDedupe?: boolean, noRecord?: boolean, pretty?: boolean, proximity?: string, roadinfo?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vversionFormatGet(version, format, q, key, abbrv, addRequest, bounds, countrycode, jsonp, language, limit, minConfidence, noAnnotations, noDedupe, noRecord, pretty, proximity, roadinfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * geocode a query
         * @param {number} version API version.
         * @param {string} format format of the response. One of \&#39;json\&#39;, \&#39;xml\&#39; or \&#39;map\&#39;.
         * @param {string} q string or lat,lng to be geocoded.
         * @param {string} key an application key.
         * @param {boolean} [abbrv] when true we attempt to abbreviate the formatted field in the response.
         * @param {boolean} [addRequest] if true the request is included in the response.
         * @param {string} [bounds] four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).
         * @param {string} [countrycode] two letter code ISO 3166-1 Alpha 2 code to limit results to that country.
         * @param {string} [jsonp] wraps the returned JSON with a function name.
         * @param {string} [language] an IETF format language code (ex: \&#39;es\&#39; or \&#39;pt-BR\&#39;).
         * @param {number} [limit] maximum number of results to return. Default is 10. Maximum is 100.
         * @param {number} [minConfidence] integer from 1-10. Only results with at least this confidence are returned.
         * @param {boolean} [noAnnotations] when true annotations are not added to results.
         * @param {boolean} [noDedupe] when true results are not deduplicated.
         * @param {boolean} [noRecord] when true query content is not logged.
         * @param {boolean} [pretty] when true results are pretty printed. Useful for debugging.
         * @param {string} [proximity] lat,lng to bias results.
         * @param {boolean} [roadinfo] match nearest road, include roadinfo annotation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vversionFormatGet(version: number, format: string, q: string, key: string, abbrv?: boolean, addRequest?: boolean, bounds?: string, countrycode?: string, jsonp?: string, language?: string, limit?: number, minConfidence?: number, noAnnotations?: boolean, noDedupe?: boolean, noRecord?: boolean, pretty?: boolean, proximity?: string, roadinfo?: boolean, options?: any): AxiosPromise<Response> {
            return localVarFp.vversionFormatGet(version, format, q, key, abbrv, addRequest, bounds, countrycode, jsonp, language, limit, minConfidence, noAnnotations, noDedupe, noRecord, pretty, proximity, roadinfo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * geocode a query
     * @param {number} version API version.
     * @param {string} format format of the response. One of \&#39;json\&#39;, \&#39;xml\&#39; or \&#39;map\&#39;.
     * @param {string} q string or lat,lng to be geocoded.
     * @param {string} key an application key.
     * @param {boolean} [abbrv] when true we attempt to abbreviate the formatted field in the response.
     * @param {boolean} [addRequest] if true the request is included in the response.
     * @param {string} [bounds] four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).
     * @param {string} [countrycode] two letter code ISO 3166-1 Alpha 2 code to limit results to that country.
     * @param {string} [jsonp] wraps the returned JSON with a function name.
     * @param {string} [language] an IETF format language code (ex: \&#39;es\&#39; or \&#39;pt-BR\&#39;).
     * @param {number} [limit] maximum number of results to return. Default is 10. Maximum is 100.
     * @param {number} [minConfidence] integer from 1-10. Only results with at least this confidence are returned.
     * @param {boolean} [noAnnotations] when true annotations are not added to results.
     * @param {boolean} [noDedupe] when true results are not deduplicated.
     * @param {boolean} [noRecord] when true query content is not logged.
     * @param {boolean} [pretty] when true results are pretty printed. Useful for debugging.
     * @param {string} [proximity] lat,lng to bias results.
     * @param {boolean} [roadinfo] match nearest road, include roadinfo annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vversionFormatGet(version: number, format: string, q: string, key: string, abbrv?: boolean, addRequest?: boolean, bounds?: string, countrycode?: string, jsonp?: string, language?: string, limit?: number, minConfidence?: number, noAnnotations?: boolean, noDedupe?: boolean, noRecord?: boolean, pretty?: boolean, proximity?: string, roadinfo?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).vversionFormatGet(version, format, q, key, abbrv, addRequest, bounds, countrycode, jsonp, language, limit, minConfidence, noAnnotations, noDedupe, noRecord, pretty, proximity, roadinfo, options).then((request) => request(this.axios, this.basePath));
    }
}


